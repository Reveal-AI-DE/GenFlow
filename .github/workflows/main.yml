name: CI
on:
  push:
    branches:
      - 'master'
      - 'develop'
  pull_request:
    types: [ready_for_review, opened, synchronize, reopened]
    paths-ignore:
      - '**/*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GF_VERSION: "local"

jobs:
  search_cache:
    if: |
      github.event.pull_request.draft == false &&
      !startsWith(github.event.pull_request.title, '[WIP]') &&
      !startsWith(github.event.pull_request.title, '[Dependent]')
    uses: ./.github/workflows/search-cache.yml

  build:
    needs: search_cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify version consistency
        run: ./dev/update_version.py --verify-current

      - name: Check changelog fragments
        run: ./dev/check_changelog_fragments.py

      - name: GF server. Getting cache from the default branch
        uses: actions/cache@v4
        with:
          path: /tmp/genflow_cache_server
          key: ${{ runner.os }}-build-server-${{ needs.search_cache.outputs.sha }}

      - name: GF UI. Getting cache from the default branch
        uses: actions/cache@v4
        with:
          path: /tmp/genflow_cache_ui
          key: ${{ runner.os }}-build-ui-${{ needs.search_cache.outputs.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create artifact directories
        run: |
          mkdir /tmp/genflow_server
          mkdir /tmp/genflow_ui

      - name: GF server. Build and push
        uses: docker/build-push-action@v6
        with:
          build-args: |
              "COVERAGE_PROCESS_START=.coveragerc"
          cache-from: type=local,src=/tmp/genflow_cache_server
          context: .
          file: Dockerfile
          tags: genflow/server:${{ env.GF_VERSION }}
          outputs: type=docker,dest=/tmp/genflow_server/image.tar

      - name: Instrumentation of the code then rebuilding the GF UI
        run: |
          yarn --frozen-lockfile
          yarn run coverage

      - name: GF UI. Build and push
        uses: docker/build-push-action@v6
        with:
          cache-from: type=local,src=/tmp/genflow_cache_ui
          context: .
          file: Dockerfile.ui
          tags: genflow/ui:${{ env.GF_VERSION }}
          outputs: type=docker,dest=/tmp/genflow_ui/image.tar

      - name: Verify API schema
        id: verify_schema
        run: |
          docker load --input /tmp/genflow_server/image.tar
          docker run --rm "genflow/server:${GF_VERSION}" bash \
            -c 'python manage.py spectacular' > genflow/schema-expected.yml

          if ! git diff --no-index genflow/schema.yml genflow/schema-expected.yml; then
            echo
            echo 'API schema has changed! Please update genflow/schema.yml:'
            echo
            echo '  docker run --rm genflow/server:dev bash \'
            echo "    -c 'python manage.py spectacular' > genflow/schema.yml"
            exit 1
          fi

      - name: Verify migrations
        run: |
          docker run --rm "genflow/server:${GF_VERSION}" bash \
            -c 'python manage.py makemigrations --check'

      - name: Upload GF server artifact
        uses: actions/upload-artifact@v4
        with:
          name: genflow_server
          path: /tmp/genflow_server/image.tar

      - name: Upload GF UI artifact
        uses: actions/upload-artifact@v4
        with:
          name: genflow_ui
          path: /tmp/genflow_ui/image.tar

  unit_testing:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download GF server image
        uses: actions/download-artifact@v4
        with:
          name: genflow_server
          path: /tmp/genflow_server/

      - name: Load Docker server image
        run: |
          docker load --input /tmp/genflow_server/image.tar
          docker image ls -a

      - name: Running unit tests
        env:
          HOST_COVERAGE_DATA_DIR: ${{ github.workspace }}
          CONTAINER_COVERAGE_DATA_DIR: "/coverage_data"
        run: |
          docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d genflow_server genflow_db

          docker compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.ci.yml run genflow_ci /bin/bash \
            -c 'coverage run -a manage.py test -v 2 genflow/apps && coverage json && mv coverage.json ${CONTAINER_COVERAGE_DATA_DIR}/unit_tests_coverage.json'

      - name: Uploading code coverage results as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage_results_unit_tests
          path: |
            ${{ github.workspace }}/coverage-final.json
            ${{ github.workspace }}/unit_tests_coverage.json

      - name: Creating a log file from genflow containers
        if: failure()
        env:
          LOGS_DIR: "${{ github.workspace }}/unit_testing"
        run: |
            mkdir $LOGS_DIR
            docker logs genflow_server > $LOGS_DIR/genflow_server.log

      - name: Uploading "genflow" container logs as an artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: unit_tests_container_logs
          path: "${{ github.workspace }}/unit_testing"

  publish_dev_images:
    if: github.ref == 'refs/heads/develop'
    needs: [unit_testing]
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC auth
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::<AWS_ACCOUNT_ID>:role/<GITHUB_OIDC_ROLE>
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download GF server images
        uses: actions/download-artifact@v4
        with:
          name: genflow_server
          path: /tmp/genflow_server/

      - name: Download GF UI images
        uses: actions/download-artifact@v4
        with:
          name: genflow_ui
          path: /tmp/genflow_ui/

      - name: Load Docker images
        run: |
          docker load --input /tmp/genflow_server/image.tar
          docker load --input /tmp/genflow_ui/image.tar

      - name: Push to AWS ECR
        env:
          ECR_NAMESPACE: ${{ secrets.ECR_NAMESPACE }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SERVER_IMAGE_REPO: ${{ secrets.ECR_REPOSITORY }}/server
          UI_IMAGE_REPO: ${{ secrets.ECR_REPOSITORY }}/ui
          IMAGE_TAG: dev
        run: |
          ECR_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_NAMESPACE}"

          # SERVER IMAGE
          docker tag "genflow/server:${GF_VERSION}" "${ECR_URI}/${SERVER_IMAGE_REPO}:${IMAGE_TAG}"
          docker push "${ECR_URI}/${SERVER_IMAGE_REPO}:${IMAGE_TAG}"

          # UI IMAGE
          docker tag "genflow/ui:${GF_VERSION}" "${ECR_URI}/${UI_IMAGE_REPO}:${IMAGE_TAG}"
          docker push "${ECR_URI}/${UI_IMAGE_REPO}:${IMAGE_TAG}"

  codecov:
    runs-on: ubuntu-latest
    needs: [unit_testing]
    steps:
      - uses: actions/checkout@v4

      - name: Merge coverage artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: coverage_results
          pattern: coverage_results_*
          delete-merged: true

      - name: Downloading coverage results
        uses: actions/download-artifact@v4
        with:
          name: coverage_results

      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}