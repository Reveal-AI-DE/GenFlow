openapi: 3.0.3
info:
  title: GenFlow REST API
  version: 0.1.1
  description: REST API for GenFlow project
  termsOfService: https://www.google.com/policies/terms/
  contact:
    name: Reveal AI team
    url: https://github.com/Reveal-AI-DE/GenFlow
    email: support@revealai.de
  license:
    name: MIT License
    url: https://en.wikipedia.org/wiki/MIT_License
paths:
  /api/auth/login:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/auth/logout:
    post:
      operationId: auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/change:
    post:
      operationId: auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset:
    post:
      operationId: auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset/confirm:
    post:
      operationId: auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/register:
    post:
      operationId: auth_register_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSerializerExRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterSerializerExRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/RegisterSerializerEx'
          description: ''
  /api/invitations:
    get:
      operationId: invitations_list
      description: Retrieve a list of all invitations. Supports filtering and searching
        by owner username, membership user ID, and membership active status.
      summary: List invitations
      parameters:
      - name: X-Team
        in: header
        description: Team identifier
        schema:
          type: string
      - in: query
        name: membership__is_active
        schema:
          type: boolean
      - in: query
        name: membership__user__id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: owner__username
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: team
        in: query
        description: Team identifier
        schema:
          type: integer
      tags:
      - invitations
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PaginatedInvitationReadList'
          description: ''
    post:
      operationId: invitations_create
      description: Create a new invitation with the provided details.
      summary: Create an invitation
      tags:
      - invitations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InvitationWriteRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/InvitationRead'
          description: ''
  /api/invitations/{key}:
    get:
      operationId: invitations_retrieve
      description: Retrieve detailed information about a specific invitation by its
        ID.
      summary: Get invitation details
      parameters:
      - in: path
        name: key
        schema:
          type: string
        description: A unique value identifying this invitation.
        required: true
      tags:
      - invitations
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/InvitationRead'
          description: ''
    patch:
      operationId: invitations_partial_update
      description: Partially update the details of a specific invitation. Only the
        provided fields will be updated.
      summary: Update an invitation
      parameters:
      - in: path
        name: key
        schema:
          type: string
        description: A unique value identifying this invitation.
        required: true
      tags:
      - invitations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInvitationWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInvitationWriteRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/InvitationRead'
          description: ''
  /api/memberships:
    get:
      operationId: memberships_list
      description: Retrieve a list of all memberships.Supports filtering and searching
        by user username and role.
      summary: List memberships
      parameters:
      - name: X-Team
        in: header
        description: Team identifier
        schema:
          type: string
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: role
        schema:
          type: string
          enum:
          - admin
          - engineer
          - member
          - owner
        description: |-
          * `owner` - Owner
          * `admin` - Admin
          * `engineer` - Engineer
          * `member` - Member
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: team
        in: query
        description: Team identifier
        schema:
          type: integer
      - in: query
        name: user__username
        schema:
          type: string
      tags:
      - memberships
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PaginatedMembershipReadList'
          description: ''
  /api/memberships/{id}:
    get:
      operationId: memberships_retrieve
      description: Retrieve detailed information about a specific membership by its
        ID.
      summary: Get membership details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this membership.
        required: true
      tags:
      - memberships
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/MembershipRead'
          description: ''
    patch:
      operationId: memberships_partial_update
      description: Partially update the details of a specific membership.Only the
        provided fields will be updated.
      summary: Update a membership
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this membership.
        required: true
      tags:
      - memberships
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMembershipWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMembershipWriteRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/MembershipRead'
          description: ''
    delete:
      operationId: memberships_destroy
      description: Delete a specific membership by its ID.
      summary: Delete a membership
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this membership.
        required: true
      tags:
      - memberships
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: The membership has been deleted
  /api/messages:
    get:
      operationId: messages_list
      description: List all messages that belong to a session.
      summary: List messages
      parameters:
      - name: X-Team
        in: header
        description: Team identifier
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: session
        schema:
          type: integer
        description: The ID of the session to filter messages by.
        required: true
      - name: team
        in: query
        description: Team identifier
        schema:
          type: integer
      tags:
      - messages
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PaginatedSessionMessageReadList'
          description: ''
  /api/models:
    get:
      operationId: models_list
      description: Allows the user to list all available AI provider models
      summary: List AI provider models
      parameters:
      - name: X-Team
        in: header
        description: Team identifier
        schema:
          type: string
      - in: query
        name: enabled_only
        schema:
          type: boolean
        description: If true, only enabled models will be returned
      - in: query
        name: model_type
        schema:
          type: string
          enum:
          - ModelType.LLM
        description: The type of the model to filter by
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: team
        in: query
        description: Team identifier
        schema:
          type: integer
      tags:
      - models
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/models/{id}:
    get:
      operationId: models_retrieve
      description: Allows the user to retrieve an AI provider model
      summary: Retrieve an AI provider model
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this provider.
        required: true
      - in: query
        name: provider_name
        schema:
          type: string
        description: The name of the AI provider to filter by
      tags:
      - models
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/models/{id}/parameter_config:
    get:
      operationId: models_parameter_config_list
      description: Allows the user to retrieve the parameter configurations for a
        specific model
      summary: Retrieve parameter configurations for a model
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this provider.
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: provider_name
        schema:
          type: string
        description: The name of the AI provider to filter by
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - models
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/prompt/groups:
    get:
      operationId: prompt_groups_list
      description: List all groups
      summary: List groups
      parameters:
      - name: X-Team
        in: header
        description: Team identifier
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: team
        in: query
        description: Team identifier
        schema:
          type: integer
      tags:
      - prompt-groups
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PaginatedEntityGroupReadList'
          description: ''
    post:
      operationId: prompt_groups_create
      description: Create a new group
      summary: Create a group
      tags:
      - prompt-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityGroupWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EntityGroupWriteRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/EntityGroupRead'
          description: ''
  /api/prompt/groups/{id}:
    get:
      operationId: prompt_groups_retrieve
      description: Get details of a group
      summary: Get group details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this entity group.
        required: true
      tags:
      - prompt-groups
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/EntityGroupRead'
          description: ''
    put:
      operationId: prompt_groups_update
      description: Provides CRUD operations for the EntityGroup model associated with
        prompts.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this entity group.
        required: true
      tags:
      - prompt-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityGroupWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EntityGroupWriteRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/EntityGroupWrite'
          description: ''
    patch:
      operationId: prompt_groups_partial_update
      description: Update an existing group
      summary: Update a group
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this entity group.
        required: true
      tags:
      - prompt-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEntityGroupWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEntityGroupWriteRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/EntityGroupRead'
          description: ''
    delete:
      operationId: prompt_groups_destroy
      description: Delete an existing group
      summary: Delete a group
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this entity group.
        required: true
      tags:
      - prompt-groups
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: The group has been deleted
  /api/prompts:
    get:
      operationId: prompts_list
      description: List all prompts
      summary: List prompts
      parameters:
      - name: X-Team
        in: header
        description: Team identifier
        schema:
          type: string
      - in: query
        name: group__id
        schema:
          type: integer
      - in: query
        name: is_pinned
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - drafted
          - published
        description: |-
          * `drafted` - Drafted
          * `published` - Published
      - name: team
        in: query
        description: Team identifier
        schema:
          type: integer
      - in: query
        name: type
        schema:
          type: string
          enum:
          - advanced
          - simple
        description: |-
          * `simple` - Simple
          * `advanced` - Advanced
      tags:
      - prompts
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PaginatedPromptReadList'
          description: ''
    post:
      operationId: prompts_create
      description: Create a new prompt
      summary: Create a prompt
      tags:
      - prompts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PromptWriteRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PromptRead'
          description: ''
  /api/prompts/{id}:
    get:
      operationId: prompts_retrieve
      description: Get details of a prompt
      summary: Get prompt details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this prompt.
        required: true
      tags:
      - prompts
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PromptRead'
          description: ''
    put:
      operationId: prompts_update
      description: |-
        Provides CRUD operations and additional functionality
        for managing Prompt objects..
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this prompt.
        required: true
      tags:
      - prompts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PromptWriteRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PromptWrite'
          description: ''
    patch:
      operationId: prompts_partial_update
      description: Update an existing prompt
      summary: Update a prompt
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this prompt.
        required: true
      tags:
      - prompts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPromptWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPromptWriteRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PromptRead'
          description: ''
    delete:
      operationId: prompts_destroy
      description: Delete an existing prompt
      summary: Delete a prompt
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this prompt.
        required: true
      tags:
      - prompts
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: The prompt has been deleted
  /api/prompts/{id}/upload_avatar:
    post:
      operationId: prompts_upload_avatar_create
      description: Upload a new avatar image for the prompt
      summary: Upload a prompt avatar
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this prompt.
        required: true
      tags:
      - prompts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PromptWriteRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PromptRead'
          description: ''
  /api/providers:
    get:
      operationId: providers_list
      description: Allows the user to list all available (enabled/disabled) AI providers
        with their configurations
      summary: List AI provider configurations
      parameters:
      - name: X-Team
        in: header
        description: Team identifier
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: team
        in: query
        description: Team identifier
        schema:
          type: integer
      tags:
      - providers
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: providers_create
      description: Allows the user to configure an AI provider on the team level,
        to be available to the team members.
      summary: Enable an AI provider
      tags:
      - providers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProviderWriteRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/ProviderRead'
          description: ''
  /api/providers/{id}:
    get:
      operationId: providers_retrieve
      description: Allows the user to retrieve an enabled AI provider with its obfuscated
        credentials
      summary: Retrieve an enabled AI provider
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this provider.
        required: true
      tags:
      - providers
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/ProviderRead'
          description: ''
    put:
      operationId: providers_update
      description: |-
        ProviderViewSet is a view set for managing Provider instances. It supports
        creating, retrieving, updating, and destroying Provider objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this provider.
        required: true
      tags:
      - providers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProviderWriteRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/ProviderWrite'
          description: ''
    patch:
      operationId: providers_partial_update
      description: Allows the user to update an enabled AI provider credentials
      summary: Update an enabled AI provider
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this provider.
        required: true
      tags:
      - providers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProviderWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProviderWriteRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/ProviderRead'
          description: ''
    delete:
      operationId: providers_destroy
      description: Allows the user to disable an AI provider
      summary: Disable an AI provider
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this provider.
        required: true
      tags:
      - providers
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: Provider disabled successfully
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      - in: query
        name: scheme
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - schema
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/sessions:
    get:
      operationId: sessions_list
      description: List all sessions that the user has access to.
      summary: List sessions
      parameters:
      - name: X-Team
        in: header
        description: Team identifier
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: team
        in: query
        description: Team identifier
        schema:
          type: integer
      tags:
      - sessions
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PaginatedSessionReadList'
          description: ''
    post:
      operationId: sessions_create
      description: Create a new session with the given data.
      summary: Create a session
      parameters:
      - in: query
        name: testing
        schema:
          type: boolean
        description: Whether the created session is a prompt test session.
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionWriteRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/SessionRead'
          description: ''
  /api/sessions/{id}:
    get:
      operationId: sessions_retrieve
      description: Retrieve the session with the given ID.
      summary: Retrieve a session
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this session.
        required: true
      tags:
      - sessions
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/SessionRead'
          description: ''
    put:
      operationId: sessions_update
      description: |-
        Provides CRUD operations and additional functionality
        for managing Session objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this session.
        required: true
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionWriteRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/SessionWrite'
          description: ''
    patch:
      operationId: sessions_partial_update
      description: Update the session with the given data.
      summary: Update a session
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this session.
        required: true
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSessionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSessionWriteRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/SessionRead'
          description: ''
    delete:
      operationId: sessions_destroy
      description: Delete the session with the given ID.
      summary: Delete a session
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this session.
        required: true
      tags:
      - sessions
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: The session has been deleted
  /api/system/about:
    get:
      operationId: system_about_retrieve
      description: This method provides information about the system, including the
        name, version, description, and license.
      summary: Method provides information about the system
      tags:
      - system
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/AboutSystem'
          description: ''
  /api/teams:
    get:
      operationId: teams_list
      description: Retrieve a list of all teams. Supports filtering and searching
        by name and owner username.
      summary: List teams
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: owner__username
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - teams
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/PaginatedTeamReadList'
          description: ''
    post:
      operationId: teams_create
      description: Create a new team with the provided details.
      summary: Create a team
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TeamWriteRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/TeamRead'
          description: ''
  /api/teams/{id}:
    get:
      operationId: teams_retrieve
      description: Retrieve detailed information about a specific team by its ID.
      summary: Get team details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this team.
        required: true
      tags:
      - teams
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/TeamRead'
          description: ''
    patch:
      operationId: teams_partial_update
      description: Partially update the details of a specific team.Only the provided
        fields will be updated.
      summary: Updates a team
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this team.
        required: true
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTeamWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTeamWriteRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/TeamRead'
          description: ''
    delete:
      operationId: teams_destroy
      description: Delete a specific team by its ID.
      summary: Delete a team
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this team.
        required: true
      tags:
      - teams
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: The team has been deleted
  /api/users/self:
    get:
      operationId: users_self_retrieve
      description: Retrieve the details of the currently authenticated user.
      summary: Get current user
      tags:
      - users
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.genflow+json:
              schema:
                $ref: '#/components/schemas/MetaUser'
          description: ''
components:
  schemas:
    AboutSystem:
      description: Represents the system information.
      properties:
        name:
          $ref: '#/components/schemas/TranslationEntity'
        description:
          $ref: '#/components/schemas/TranslationEntity'
        license:
          $ref: '#/components/schemas/TranslationEntity'
        version:
          title: Version
          type: string
      required:
      - name
      - description
      - license
      - version
      title: AboutSystem
      type: object
    BasicUser:
      type: object
      description: |-
        Serializer for the User model tha returns a serialized representation
        of the User model with the basic fields, and validates the presence of
        unknown fields in the input data.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
    EntityGroupRead:
      type: object
      description: Serializer for reading EntityGroup data, to be used by get actions.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        color:
          type: string
          maxLength: 9
        entity_type:
          type: string
          maxLength: 50
      required:
      - color
      - description
      - entity_type
      - name
    EntityGroupWrite:
      type: object
      description: Serializer for writing EntityGroup data, to be used by post/patch
        actions.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
        color:
          type: string
          maxLength: 9
      required:
      - color
      - description
      - name
    EntityGroupWriteRequest:
      type: object
      description: Serializer for writing EntityGroup data, to be used by post/patch
        actions.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          minLength: 1
        color:
          type: string
          minLength: 1
          maxLength: 9
      required:
      - color
      - description
      - name
    InvitationRead:
      type: object
      description: |-
        Serializer for Invitation model, where all fields are read-only.
        To be used for GET requests.
      properties:
        id:
          type: string
        created_date:
          type: string
          format: date-time
          readOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/BasicUser'
          nullable: true
        role:
          $ref: '#/components/schemas/RoleEnum'
        user:
          $ref: '#/components/schemas/BasicUser'
        team:
          type: integer
      required:
      - id
      - owner
      - role
      - team
      - user
    InvitationWriteRequest:
      type: object
      description: |-
        Serializer for Invitation model, to be used for POST requests.
        It uses the TeamReadSerializer for the representation of the instance data.
      properties:
        role:
          $ref: '#/components/schemas/RoleEnum'
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
      - role
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
      required:
      - password
    MembershipRead:
      type: object
      description: |-
        Serializer for Membership model, where all fields are read-only.
        To be used for GET requests.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          $ref: '#/components/schemas/BasicUser'
        team:
          type: integer
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
        joined_date:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          readOnly: true
        invitation:
          type: string
          readOnly: true
          nullable: true
        created_date:
          type: string
          format: date-time
          readOnly: true
        updated_date:
          type: string
          format: date-time
          readOnly: true
      required:
      - user
    MetaUser:
      oneOf:
      - $ref: '#/components/schemas/User'
      - $ref: '#/components/schemas/BasicUser'
    PaginatedEntityGroupReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EntityGroupRead'
    PaginatedInvitationReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/InvitationRead'
    PaginatedMembershipReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MembershipRead'
    PaginatedPromptReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PromptRead'
    PaginatedSessionMessageReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SessionMessageRead'
    PaginatedSessionReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SessionRead'
    PaginatedTeamReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TeamRead'
    PasswordChangeRequest:
      type: object
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordResetConfirmRequest:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    PatchedEntityGroupWriteRequest:
      type: object
      description: Serializer for writing EntityGroup data, to be used by post/patch
        actions.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          minLength: 1
        color:
          type: string
          minLength: 1
          maxLength: 9
    PatchedInvitationWriteRequest:
      type: object
      description: |-
        Serializer for Invitation model, to be used for POST requests.
        It uses the TeamReadSerializer for the representation of the instance data.
      properties:
        role:
          $ref: '#/components/schemas/RoleEnum'
        email:
          type: string
          format: email
          minLength: 1
    PatchedMembershipWriteRequest:
      type: object
      description: |-
        Serializer for Membership model, to be used for POST requests.
        It uses the MembershipReadSerializer for the representation of the instance data.
      properties:
        is_active:
          type: boolean
        role:
          $ref: '#/components/schemas/RoleEnum'
    PatchedPromptWriteRequest:
      type: object
      description: Serializer for writing Prompt data, to be used by post/patch actions.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          minLength: 1
        pre_prompt:
          type: string
          minLength: 1
        suggested_questions:
          nullable: true
        is_pinned:
          type: boolean
        type:
          $ref: '#/components/schemas/TypeEnum'
        status:
          $ref: '#/components/schemas/StatusEnum'
        related_model:
          $ref: '#/components/schemas/ProviderModelConfigWriteRequest'
        group_id:
          type: integer
    PatchedProviderWriteRequest:
      type: object
      description: Serializer for writing provider details.
      properties:
        provider_name:
          type: string
          minLength: 1
          maxLength: 255
        credentials: {}
    PatchedSessionWriteRequest:
      type: object
      description: Serializer for writing Session data, to be used by post/patch actions.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        session_type:
          $ref: '#/components/schemas/SessionTypeEnum'
        session_mode:
          $ref: '#/components/schemas/SessionModeEnum'
        related_model:
          $ref: '#/components/schemas/ProviderModelConfigWriteRequest'
        related_prompt:
          type: integer
    PatchedTeamWriteRequest:
      type: object
      description: |-
        Serializer for Team model, to be used for POST requests.
        It uses the TeamReadSerializer for the representation of the instance data.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
    PromptRead:
      type: object
      description: Serializer for reading Prompt data, to be used by get actions.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        pre_prompt:
          type: string
        is_pinned:
          type: boolean
        suggested_questions:
          nullable: true
        type:
          $ref: '#/components/schemas/TypeEnum'
        status:
          $ref: '#/components/schemas/StatusEnum'
        related_model:
          $ref: '#/components/schemas/ProviderModelConfigRead'
        group:
          $ref: '#/components/schemas/EntityGroupRead'
        group_id:
          type: integer
          readOnly: true
        avatar:
          type: string
          format: uri
          nullable: true
        related_test_session:
          type: integer
          description: Returns the related test session for the given Prompt instance.
          readOnly: true
      required:
      - description
      - group
      - name
      - pre_prompt
      - related_model
    PromptWrite:
      type: object
      description: Serializer for writing Prompt data, to be used by post/patch actions.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
        pre_prompt:
          type: string
        suggested_questions:
          nullable: true
        is_pinned:
          type: boolean
        type:
          $ref: '#/components/schemas/TypeEnum'
        status:
          $ref: '#/components/schemas/StatusEnum'
        related_model:
          $ref: '#/components/schemas/ProviderModelConfigWrite'
        group_id:
          type: integer
      required:
      - description
      - group_id
      - name
      - pre_prompt
      - related_model
    PromptWriteRequest:
      type: object
      description: Serializer for writing Prompt data, to be used by post/patch actions.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          minLength: 1
        pre_prompt:
          type: string
          minLength: 1
        suggested_questions:
          nullable: true
        is_pinned:
          type: boolean
        type:
          $ref: '#/components/schemas/TypeEnum'
        status:
          $ref: '#/components/schemas/StatusEnum'
        related_model:
          $ref: '#/components/schemas/ProviderModelConfigWriteRequest'
        group_id:
          type: integer
      required:
      - description
      - group_id
      - name
      - pre_prompt
      - related_model
    ProviderModelConfigRead:
      type: object
      description: Serializer for reading ProviderModelConfig data, to be used by
        get actions.
      properties:
        provider_name:
          type: string
          maxLength: 255
        model_name:
          type: string
          maxLength: 255
        config:
          nullable: true
      required:
      - model_name
      - provider_name
    ProviderModelConfigWrite:
      type: object
      description: Serializer for writing ProviderModelConfig data, to be used by
        post/patch actions.
      properties:
        provider_name:
          type: string
          maxLength: 255
        model_name:
          type: string
          maxLength: 255
        config:
          nullable: true
      required:
      - model_name
      - provider_name
    ProviderModelConfigWriteRequest:
      type: object
      description: Serializer for writing ProviderModelConfig data, to be used by
        post/patch actions.
      properties:
        provider_name:
          type: string
          minLength: 1
          maxLength: 255
        model_name:
          type: string
          minLength: 1
          maxLength: 255
        config:
          nullable: true
      required:
      - model_name
      - provider_name
    ProviderRead:
      type: object
      description: Serializer for reading provider details.
      properties:
        id:
          type: integer
          readOnly: true
        provider_name:
          type: string
          maxLength: 255
        credentials:
          type: object
          additionalProperties: {}
          description: Returns the decrypted credentials.
          readOnly: true
        is_enabled:
          type: boolean
          description: Returns if the provider is valid.
          readOnly: true
        last_used:
          type: string
          format: date-time
          nullable: true
      required:
      - provider_name
    ProviderWrite:
      type: object
      description: Serializer for writing provider details.
      properties:
        provider_name:
          type: string
          maxLength: 255
        credentials: {}
      required:
      - credentials
      - provider_name
    ProviderWriteRequest:
      type: object
      description: Serializer for writing provider details.
      properties:
        provider_name:
          type: string
          minLength: 1
          maxLength: 255
        credentials: {}
      required:
      - credentials
      - provider_name
    RegisterSerializerEx:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        email_verification_required:
          type: boolean
          readOnly: true
        key:
          type: string
          nullable: true
          readOnly: true
      required:
      - email
      - username
    RegisterSerializerExRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
        password1:
          type: string
          writeOnly: true
          minLength: 1
        password2:
          type: string
          writeOnly: true
          minLength: 1
        first_name:
          type: string
          minLength: 1
        last_name:
          type: string
          minLength: 1
      required:
      - email
      - password1
      - password2
      - username
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
    RoleEnum:
      enum:
      - owner
      - admin
      - engineer
      - member
      type: string
      description: |-
        * `owner` - Owner
        * `admin` - Admin
        * `engineer` - Engineer
        * `member` - Member
    SessionMessageRead:
      type: object
      description: Serializer for reading SessionMessage data, to be used by get actions.
      properties:
        id:
          type: integer
          readOnly: true
        query:
          type: string
        answer:
          type: string
          nullable: true
        created_date:
          type: string
          format: date-time
          readOnly: true
        updated_date:
          type: string
          format: date-time
          readOnly: true
        owner:
          type: string
          readOnly: true
      required:
      - query
    SessionModeEnum:
      enum:
      - chat
      - completion
      type: string
      description: |-
        * `chat` - Chat
        * `completion` - Completion
    SessionRead:
      type: object
      description: Serializer for reading Session data, to be used by get actions.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        session_type:
          $ref: '#/components/schemas/SessionTypeEnum'
        session_mode:
          $ref: '#/components/schemas/SessionModeEnum'
        related_model:
          $ref: '#/components/schemas/ProviderModelConfigRead'
        related_prompt:
          $ref: '#/components/schemas/PromptRead'
        created_date:
          type: string
          format: date-time
          readOnly: true
        updated_date:
          type: string
          format: date-time
          readOnly: true
        owner:
          $ref: '#/components/schemas/BasicUser'
        usage:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - name
      - owner
    SessionTypeEnum:
      enum:
      - llm
      - prompt
      type: string
      description: |-
        * `llm` - Llm
        * `prompt` - Prompt
    SessionWrite:
      type: object
      description: Serializer for writing Session data, to be used by post/patch actions.
      properties:
        name:
          type: string
          maxLength: 255
        session_type:
          $ref: '#/components/schemas/SessionTypeEnum'
        session_mode:
          $ref: '#/components/schemas/SessionModeEnum'
        related_model:
          $ref: '#/components/schemas/ProviderModelConfigWrite'
        related_prompt:
          type: integer
      required:
      - name
    SessionWriteRequest:
      type: object
      description: Serializer for writing Session data, to be used by post/patch actions.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        session_type:
          $ref: '#/components/schemas/SessionTypeEnum'
        session_mode:
          $ref: '#/components/schemas/SessionModeEnum'
        related_model:
          $ref: '#/components/schemas/ProviderModelConfigWriteRequest'
        related_prompt:
          type: integer
      required:
      - name
    StatusEnum:
      enum:
      - drafted
      - published
      type: string
      description: |-
        * `drafted` - Drafted
        * `published` - Published
    TeamRead:
      type: object
      description: |-
        Serializer for Team model, where all fields are read-only.
        To be used for GET requests.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        created_date:
          type: string
          format: date-time
          readOnly: true
        updated_date:
          type: string
          format: date-time
          readOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/BasicUser'
          nullable: true
        user_role:
          type: string
          nullable: true
          description: |-
            Retrieve the role of the user in the given team.

            Args:
                obj: The team object for which the user's role is being retrieved.

            Returns:
                str: The role of the user in the team if the user is a member, otherwise None.
          readOnly: true
        is_personal:
          type: boolean
          description: Returns True if the team name matches the default user team
            name from settings.
          readOnly: true
      required:
      - owner
    TeamWriteRequest:
      type: object
      description: |-
        Serializer for Team model, to be used for POST requests.
        It uses the TeamReadSerializer for the representation of the instance data.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
      required:
      - name
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    TranslationEntity:
      additionalProperties: true
      description: 'Represents a translation object with the following attributes:'
      properties:
        en_US:
          description: Required key for English (US) translation
          title: En Us
          type: string
      required:
      - en_US
      title: TranslationEntity
      type: object
    TypeEnum:
      enum:
      - simple
      - advanced
      type: string
      description: |-
        * `simple` - Simple
        * `advanced` - Advanced
    User:
      type: object
      description: |-
        Serializer for the User model tha returns a serialized representation
        of the User model with the all fields and their associated groups.

        Attributes:
            groups (SlugRelatedField): A field that represents the user's groups using the
                group's name as the slug field. It allows multiple groups to be associated
                with a user.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        groups:
          type: array
          items:
            type: string
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
      required:
      - groups
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
externalDocs:
  description: GenFlow documentation
  url: https://genflow.github.io/genflow/docs/
